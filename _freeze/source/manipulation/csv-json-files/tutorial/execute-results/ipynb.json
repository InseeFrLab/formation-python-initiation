{
  "hash": "ce49ec2295633f3101c780be1908b74c",
  "result": {
    "markdown": "---\ntitle: \"Travailler avec des fichiers CSV et JSON\"\nabstract: \"Manipulation des fichiers CSV et JSON, deux types de fichiers très utilisés pour la diffusion de données.\"\nexecute:\n    echo: true\n    eval: false\n---\n\nDans le précédent tutoriel, nous avons vu comment utiliser des fonctions provenant de modules, ainsi que comment lire et écrire des fichiers texte. Dans ce tutoriel, nous allons mettre à profit ces nouvelles compétences en nous intéressant à **deux types de fichiers texte très fréquemment utilisés pour stocker et diffuser des données : les fichiers CSV et les fichiers JSON**. Nous allons apprendre à manipuler ces deux types de fichiers grâce aux modules Python dédiés à leur traitement respectif : **le module `csv` et le module `json`**.\n\n\n## Manipuler des fichiers CSV\n\n<!-- #region tags=[] -->\n### Les fichiers CSV\n<!-- #endregion -->\n\nCSV signifie ***comma-separated values***, soit en bon français \"valeurs séparées par des virgules\". Les fichiers CSV visent à reproduire la **structure des données issues de tableurs** type Excel de Microsoft ou Calc de LibreOffice, réduite à la stricte donnée textuelle (plus de formatage, plus de types de colonne, etc.).\n\nNous allons prendre pour exemple le fichier CSV qui contient la liste des départements en 2021, issue du Code Officiel Géographique (COG). Regardons les premières lignes de ce fichier à l'aide d'une commande `shell` pour avoir bien en tête la structure d'un tel fichier.\n\n::: {#2fef4b7a .cell execution_count=1}\n``` {.python .cell-code}\n!head -n 5 departement2021.csv\n```\n:::\n\n\nPour reprendre l'analogie avec un fichier issu d'un tableur, chaque ligne du fichier représente une ligne du tableur, et les cellules d'une ligne sont séparées par des virgules. La première ligne peut contenir un `header` (en-tête), c'est à dire le nom des colonnes, mais ce n'est pas toujours le cas.\n\n\nLes principaux avantages des fichiers CSV sont :\n- leur **simplicité** : ils contiennent des données textuelles brutes, donc très légères et qui peuvent être éditées facilement via n'importe quel éditeur de texte ou langage de programmation\n- leur **universalité** : ils sont très largement utilisés comme un format standard d'échanges de données\n\n\n### Le module `csv`\n\n\nLes données contenues dans un CSV étant des données textuelles, on peut se demander pourquoi l'on a besoin d'un module particulier pour les manipuler, et pourquoi les outils que l'on a vus dans le tutoriel précédent ne seraient pas suffisants. La raison principale est que les fichiers CSV ont tout de même quelques subtilités et normes, souvent invisibles à l'utilisateur, mais très importantes en pratique. Par exemple : si l'on veut séparer les différentes données selon les virgules, que se passe-t-il si les données textuelles elles-même contiennent des virgules ?\n\nC'est pour cette raison qu'on utilise le **module `csv`** pour interagir avec ce type de fichiers, afin de capitaliser sur le fait que d'autres se sont posés toutes ces questions, et donc de ne pas avoir à réinventer la roue à chaque import de fichier CSV.\n\nNotons qu'en pratique, on a plutôt tendance à manipuler ce type de données sous la forme de DataFrames (comme en `R`), afin de tirer parti de leur **structure tabulaire**. On étudiera dans un prochain tutoriel le ***package* `Pandas`** qui permet précisément de faire cela en Python. Néanmoins, il est toujours utile de savoir bien manipuler les données d'un CSV comme des données textuelles, et donc de connaître le module `csv`.\n\n\n### Lecture\n\n::: {#87657848 .cell execution_count=2}\n``` {.python .cell-code}\nimport csv\n```\n:::\n\n\nLa syntaxe permettant de lire et manipuler des fichiers CSV en Python est très proche de celle pour les fichiers texte simples. La seule différence est que l'on doit créer un objet `reader` à partir de l'objet fichier pour pouvoir itérer sur les lignes.\n\n::: {#7dbbb96f .cell execution_count=3}\n``` {.python .cell-code}\nrows = []\n\nwith open(\"departement2021.csv\") as file_in:\n    csv_reader = csv.reader(file_in)\n    for row in csv_reader:\n        rows.append(row)\n\nrows[:4]\n```\n:::\n\n\nOn retrouve bien la même syntaxe que pour les fichiers texte simples : une fois le `reader` créé, on peut itérer sur les lignes et réaliser des opérations avec celles-ci ; par exemple, les stocker dans une liste comme ci-dessus.\n\n\nLorsqu'on a un fichier CSV avec des noms de colonne comme dans notre cas, il est intéressant de les utiliser pour manipuler la donnée nommée, plutôt que par position en utilisant une liste simple. On utilise pour cela un `DictReader` au lieu du `reader`. A présent, lorsqu'on itère sur l'objet `DictReader` créé, chaque ligne est un dictionnaire, donc la clé est le nom de la colonne et la valeur la donnée de la cellule. \n\nPour illustrer son intérêt, affichons les noms des départements donc le numéro de département est compris entre 20 et 29.\n\n::: {#50a50b09 .cell execution_count=4}\n``` {.python .cell-code}\nwith open(\"departement2021.csv\") as file_in:\n    dict_reader = csv.DictReader(file_in)\n    for row in dict_reader:\n        if row[\"DEP\"].startswith(\"2\"):\n            print(row[\"LIBELLE\"])\n```\n:::\n\n\nLe code est beaucoup plus lisible : on comprend facilement quelles données sont manipulées et de quelle manière.\n\n<!-- #region tags=[] -->\n### Écriture\n<!-- #endregion -->\n\nLa syntaxe pour l'écriture est là encore assez proche de celle pour les fichiers texte. La différence est que l'on traite des données en 2D (ligne x colonne), on ne peut donc plus passer seulement une chaîne de caractère à l'écriture, il faut **passer une liste d'éléments**.\n\n::: {#991ec4fa .cell execution_count=5}\n``` {.python .cell-code}\nheader = [\"nom\", \"classe\", \"age\"]\nrow1 = [\"Maurice\", \"5èmeB\", 12]\nrow2 = [\"Manuela\", \"6èmeA\", 11]\n\nwith open(\"test.csv\", \"w\") as file_out:\n    csv_writer = csv.writer(file_out)\n    csv_writer.writerow(header)\n    csv_writer.writerow(row1)\n    csv_writer.writerow(row2)\n```\n:::\n\n\nVérifions que notre fichier CSV brut ressemble bien à ce que nous attendions.\n\n::: {#a0459e3d .cell execution_count=6}\n``` {.python .cell-code}\n# Commande shell pour afficher le contenu d'un fichier\n!cat test.csv\n```\n:::\n\n\n### Le *header*\n\n\nComme dans un document de type tableur, la première ligne d'un fichier CSV contient généralement les **noms des variables** (colonnes). On appelle cette ligne le ***header***. Cette ligne n'est pas obligatoire en théorie, mais elle est quand même bien pratique pour comprendre rapidement la nature des données qui se trouvent dans un fichier CSV. C'est donc une bonne pratique d'inclure un *header* lorsqu'on génère un fichier CSV.\n\nNous avons vu dans l'exemple précédent que l'écriture du *header* se faisait comme celle de n'importe quelle autre ligne de donnée. C'est lors de la lecture que les choses se compliquent, puisqu'il faut récupérer le *header* séparément des autres données si le fichier CSV en contient un. Utilisons le CSV généré à l'étape précédente pour illustrer cela.\n\n::: {#fbc6d714 .cell execution_count=7}\n``` {.python .cell-code}\ndata = []\nwith open(\"test.csv\", \"r\") as file_in:\n    csv_reader = csv.reader(file_in)\n    header = next(csv_reader)\n    for row in csv_reader:\n        data.append(row)\n```\n:::\n\n\n::: {#c225ac11 .cell execution_count=8}\n``` {.python .cell-code}\nprint(header)\n```\n:::\n\n\n::: {#a9add44b .cell execution_count=9}\n``` {.python .cell-code}\nprint(data)\n```\n:::\n\n\nPour récupérer le *header*, on utilise la fonction `next`. C'est une fonction *built-in* qui va appeler la méthode `__next__` de l'objet `reader`, qui permet d'itérer d'un pas sur le `reader`. Le premier appel à la fonction `next` renvoie donc la première ligne du document. Si un *header* est présent dans le fichier (ce dont il faut s'assurer), l'élément renvoyé est le *header*. On récupère ensuite classiquement le reste des données via une boucle sur l'objet `reader`, que l'on stocke dans une liste de listes (une liste par ligne).\n\n\n### Importance du délimiteur\n\n\nLe **délimiteur** correspond au caractère qui est utilisé pour délimiter les valeurs successives d'une ligne dans un fichier CSV.\n\nLe standard CSV utilise &mdash; comme son nom l'indique &mdash; la virgule comme délimiteur, mais cela est modifiable, et **il n'est pas rare de tomber sur des fichiers CSV qui ont un autre délimiteur**. Il faut dans ce cas aller regarder directement dans le texte brut quel est le délimiteur utilisé. On trouve par exemple souvent une délimitation par des `tabs` (le caractère est `\\t`), i.e. un nombre d'espaces donné, auquel cas le fichier peut avoir pour extension `.tsv` pour *tab-separated value*. Il faut alors spécifier le délimiteur avec le paramètre `delimiter` lorsqu'on crée le `reader`.\n\nEn pratique, comme pour l'encodage d'un fichier texte, **il y a peu de raison valable pour changer de délimiteur**. Même si des virgules apparaissent dans des valeurs du fichier — par exemple, dans une adresse — ces valeurs sont alors entourées par des guillemets, ce qui permet à la séparation des valeurs de se faire correctement dans la grande majorité des cas.\n\n\n## Manipuler des fichiers JSON\n\n<!-- #region tags=[] -->\n### Les fichiers JSON\n<!-- #endregion -->\n\nLe JSON (*JavaScript Object Notation*) est un format de fichier très populaire pour écrire et échanger de la donnée sous la forme d'une chaîne de caractères unique et lisible par l'humain (*human-readable*) — du moins en théorie. \n\nComme son nom le suggère, le JSON est lié au langage *JavaScript* dans la mesure où il constitue un dérivé de la notation des objets dans ce langage. Le format est cependant désormais indépendant de tout langage de programmation, mais est très fréquemment utilisé dans différents langages. \n\nLe format JSON est particulièrement important pour les statisticiens et data scientists car il constitue le **format quasi-standard de réponse des [API](https://fr.wikipedia.org/wiki/Interface_de_programmation)**. Le dialogue avec les API va au delà du programme de ce cours d'introduction. Cependant, les API tendant à se généraliser comme mode de communication standard pour l'échange de données, il est important de maîtriser les bases du format JSON afin de manipuler les réponses des API lorsqu'on doit interagir avec celles-ci.\n\nLe JSON stockant les objets sous forme de **paires clé-valeur** et où les valeurs peuvent être des ***arrays*** — un concept assez large en informatique qui inclut notamment les listes que nous connaissons — il ressemble fortement aux dictionnaires Python. Il constitue ainsi un format de fichier assez naturel pour ***sérialiser*** ces derniers, c'est à dire passer d'une structure de données en mémoire (ici, un dictionnaire) à une séquence d'octets qui peut être universellement lue par tout ordinateur. Regardons à titre d'exemple la représentation JSON d'un dictionnaire Python.\n\n::: {#2c580ce8 .cell execution_count=10}\n``` {.python .cell-code}\ncv = {\n    \"marc\": {\"poste\": \"manager\", \"experience\": 7, \"hobbies\": [\"couture\", \"frisbee\"]},\n    \"miranda\": {\"poste\": \"ingénieure\", \"experience\": 5, \"hobbies\": [\"trekking\"]}\n}\n\nprint(cv)\n```\n:::\n\n\n::: {#d9fa13f3 .cell execution_count=11}\n``` {.python .cell-code}\nimport json\n\nprint(json.dumps(cv))\n```\n:::\n\n\nOn le voit : la représentation JSON est assez proche de celle du dictionnaire Python, avec **quelques particularités**. Dans ce cas par exemple, les caractères spéciaux comme les accents sont automatiquement encodés en *Unicode*.\n\n\n### Le module `json`\n\n\nLe module `json` gère l'import de fichiers JSON et l'export d'objets Python au format JSON. Il s'occupe notamment de gérer les contraintes de conversion en JSON évoquées précédemment, comme celle des accents. \n\nEn particulier, **le JSON peut stocker la majorité des types d'objets *built-in* de Python** que nous avons vus jusqu'à présent (*strings*, valeurs numériques, Booléens, listes, dictionnaires, `NoneType`) et bien d'autres, mais il ne peut pas représenter des objets Python créés manuellement via des classes par exemple.\n\n\n### Écriture\n\n\nCommençons cette fois par l'écriture. Comme nous l'avons vu dans l'exemple précédent, la fonction `dumps` (pour *dump string*) convertit une valeur Python **sérialisable** en sa représentation JSON sous forme de chaîne de caractères.\n\n::: {#49a8c61c .cell execution_count=12}\n``` {.python .cell-code}\nx = \"test\"\njson.dumps(x)\n```\n:::\n\n\n::: {#b42a275b .cell execution_count=13}\n``` {.python .cell-code}\nx = [1, 2, 3]\njson.dumps(x)\n```\n:::\n\n\nEcrire un fichier JSON à partir de Python revient simplement à écrire cette représentation dans un fichier texte, auquel on donnera l'extension `.json` pour bien marquer qu'il s'agit d'un fichier texte particulier. Comme cette opération est très fréquente, il existe une fonction très proche, `dump`, qui effectue à la fois la conversion et l'écriture.\n\n::: {#3d952da7 .cell execution_count=14}\n``` {.python .cell-code}\nwith open(\"cv.json\", \"w\") as file_out:\n    json.dump(cv, file_out)\n```\n:::\n\n\n::: {#b494bc61 .cell execution_count=15}\n``` {.python .cell-code}\n!cat cv.json\n```\n:::\n\n\nEn une seule opération, on a sérialisé un dictionnaire Python (l'objet `cv`) dans un fichier JSON.\n\n\n### Lecture\n\n\nLe module `json` propose les fonctions `load` et `loads`, qui réalisent respectivement les opérations opposées des fonctions `dump` et `dumps` :\n- la fonction `load` permet d'importer du contenu JSON présent dans un fichier texte et de le convertir en un dictionnaire\n- la fonction `loads` permet de convertir du contenu JSON présent dans une chaîne de caractères en un dictionnaire\n\n\nReprenons le CV que nous avons sérialisé précédemment au format JSON pour illustrer la lecture à partir d'un fichier.\n\n::: {#57b8e94e .cell execution_count=16}\n``` {.python .cell-code}\nwith open(\"cv.json\", \"r\") as file_in:\n    data = json.load(file_in)\n    \ndata\n```\n:::\n\n\nNous allons illustrer la lecture de contenu JSON à partir d'une chaîne de caractères à partir d'un exemple réaliste : celui du requêtage d'une API. Pour l'exemple, nous allons requêter la Base Adresse Nationale (BAN), qui permet de géolocaliser n'importe quelle adresse nationale.\n\nLe requêtage d'API en Python se fait très simplement grâce à la librairie `requests`. Regardons par exemple comment l'on peut récupérer en seulement deux lignes de code les informations géographiques sur toutes les voies qui contiennent le nom \"comédie\" en France.\n\n::: {#67a558e9 .cell execution_count=17}\n``` {.python .cell-code}\nimport requests\n```\n:::\n\n\n::: {#673e256a .cell execution_count=18}\n``` {.python .cell-code}\nresponse = requests.get(\"https://api-adresse.data.gouv.fr/search/?q=comedie&type=street\")\nr_text = response.text\nprint(r_text[:150])\n```\n:::\n\n\nL'API nous renvoie une réponse, dont on extrait le contenu textuel. Comme pour la très grande majorité des API, ce contenu est du JSON. On peut alors l'importer dans un dictionnaire Python via la fonction `loads` (pour *load string*) pour pouvoir manipuler la donnée qu'il contient.\n\n::: {#98aaa2be .cell execution_count=19}\n``` {.python .cell-code}\nr_dict = json.loads(r_text)\n```\n:::\n\n\n::: {#ae8d9e25 .cell execution_count=20}\n``` {.python .cell-code}\nr_dict.keys()\n```\n:::\n\n\n::: {#d56961b7 .cell execution_count=21}\n``` {.python .cell-code}\ntype(r_dict[\"features\"])\n```\n:::\n\n\nLes résultats qui nous intéressent sont contenues dans la valeur du dictionnaire associée à la clé `features`, qui est une liste de dictionnaires, un par résultat.\n\n::: {#b4b7b165 .cell execution_count=22}\n``` {.python .cell-code}\nr_dict[\"features\"][0]\n```\n:::\n\n\n::: {#22cad2b1 .cell execution_count=23}\n``` {.python .cell-code}\nr_dict[\"features\"][1]\n```\n:::\n\n\n## Exercices\n\n### Questions de compréhension\n\n\n- 1/ Qu'est ce qu'un fichier CSV ?\n- 2/ Quel sont les avantages du format CSV ?\n- 3/ Pourquoi utilise-t-on le module `csv` pour lire et écrire des fichiers CSV ?\n- 4/ Les données d'un fichier CSV sont-elles forcément séparées par des virgules ?\n- 5/ Qu'est-ce que le *header* d'un fichier CSV ? Existe-t-il nécessairement ?\n- 6/ Pourquoi le format JSON est très utilisé dans la manipulation de données ?\n- 7/ A quel objet Python ressemble du contenu au format JSON ?\n- 8/ Quels types d'objets Python peuvent être convertis en JSON ?\n- 9/ Qu'est ce que la sérialisation d'un objet Python ?\n- 10/ Quel est le principal point commun entre les fichiers CSV et les fichiers JSON ?\n- 11/ Un fichier dont l'extension est .json contient-il nécessairement du JSON ?\n\n::: {#c70e0986 .cell execution_count=24}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 3-39 solutions.py\n```\n\n### Exercice : trier les clés lors de l'écriture d'un JSON\n\n\nLa cellule suivante contient un dictionnaire. Le but de l'exercice est d'écrire ces données dans un fichier JSON, en triant les clés du dictionnaire par ordre alphabétique.\n\nIndice : la fonction `dump` du module `json` contient un paramètre permettant de trier les clés. Lisez la [documentation de la fonction](https://docs.python.org/fr/3/library/json.html#json.dump) pour le déterminer.\n\n::: {#b36c23fc .cell execution_count=25}\n``` {.python .cell-code}\ndata = {\"id\": 1, \"nom\": \"Isidore\", \"age\": 29}\n```\n:::\n\n\n::: {#ebed1192 .cell execution_count=26}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 43-48 solutions.py\n```\n\n### Exercice : convertir un objet non-sérialisable en JSON\n\n\nNous avons vu que les objets que l'on crée manuellement via des classes ne sont généralement pas sérialisables. La cellule suivante en montre un exemple avec notre objet `Citron` utilisé dans le tutoriel sur la POO. Essayer de convertir directement l'objet en JSON renvoie une erreur.\n\nVous devez modifier le code suivant afin de pouvoir sérialiser l'objet. Pour cela, vous devez : \n- convertir l'instance `mon_citron` en utilisant la méthode *built-in* `__dict__` que possèdent tous les objets Python\n- convertir le dictionnaire obtenu en JSON sous forme de chaîne de caractères\n\n::: {#4f426223 .cell execution_count=27}\n``` {.python .cell-code}\nimport json\n\nclass Citron:\n\n    def __init__(self, couleur, qte_jus):\n        self.saveur = \"acide\"\n        self.couleur = couleur\n        self.jus = qte_jus\n        \nmon_citron = Citron(couleur=\"jaune\", qte_jus=45)\njson.dumps(mon_citron)\n```\n:::\n\n\n::: {#1980d81b .cell execution_count=28}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 52-64 solutions.py\n```\n\n### Exercice : changer le délimiteur d'un fichier CSV\n\n\nVotre répertoire courant contient le fichier `nat2020.csv`. Il s'agit du fichier des prénoms diffusé par l'Insee : il contient des données sur les prénoms attribués aux enfants nés en France entre 1900 et 2020. \n\nProblème : contrairement au standard CSV, le délimiteur utilisé n'est pas la virgule. Vous devez donc :\n- trouver le séparateur utilisé (via l'éditeur de texte Jupyter, via une commande shell, en testant avec le module `csv` en Python..) pour lire correctement le fichier\n- générer un nouveau fichier CSV `nat2020_corr.csv` contenant les mêmes données, mais cette fois avec la virgule comme séparateur.\n\n::: {#c21c3db2 .cell execution_count=29}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 68-81 solutions.py\n```\n\n### Exercice : extraire et sauvegarder des données issues d'une API\n\n\nL'exercice consiste à effectuer une requête à l'API de la Base Adresse Nationale, et sauvegarder les résultats dans un fichier CSV. Voici les étapes à implémenter :\n- effectuer une requête de nom de rue avec un mot clé comme dans le tutoriel (si vous souhaitez faire une requête plus complexe, vous pouvez regarder la [documentation de l'API](https://adresse.data.gouv.fr/api-doc/adresse)) et stocker les résultats dans un dictionnaire\n- créer un fichier CSV `resultats_ban.csv` dans lequel on va stocker les informations suivantes : 'nom', 'ville', 'code_commune', 'longitude', 'latitude'\n- à l'aide d'un objet `writer` et d'une boucle sur les résultats renvoyés par l'API, écrivez chaque ligne dans le CSV\n\nPar exemple, pour la requête de voie contenant le mot \"comedie\", voici le CSV à obtenir :\n\n```\nnom,ville,code_commune,longitude,latitude\nRue de la Vieille Comedie,Lille,59350,3.063832,50.635192\nPlace de la Comédie,Montpellier,34172,3.879638,43.608525\nRue de la Comédie,Cherbourg-en-Cotentin,50129,-1.629732,49.641574\nAllee de la Comedie,Villeneuve-d'Ascq,59009,3.162808,50.64628\nRue de l’Ancienne Comedie,Poitiers,86194,0.342649,46.580457\n```\n\n::: {#9d9eb172 .cell execution_count=30}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 85-99 solutions.py\n```\n\n### Exercice : découper la base des départements par régions\n\n\nL'objectif de cet exercice est de découper le fichier CSV des départements que nous avons utilisé dans le tutoriel en plusieurs petits CSV, un par région. Ce type d'opération peut être utile par exemple lorsqu'on travaille avec un fichier de très grande taille, qui ne passe pas en mémoire ; le découper en plusieurs fichiers que l'on traite indépendamment, lorsque cela est possible, permet de réduire la volumétrie.\n\nVoici la liste des opérations à effectuer : \n- créer un dossier `dep` dans le répertoire courant à l'aide du module `pathlib` (cf. tutoriel précédent)\n- avec un objet `reader` du module `csv`, faire une boucle sur les lignes du fichier CSV des départements. Attention à ne pas inclure le *header*, en utilisant la fonction `next` pour passer la première ligne. Pour chaque ligne suivante : \n    - récupérer le code région (variable `REG`)\n    - générer le chemin du fichier CSV `dep/{REG}.csv` où {REG} est à remplacer par le code région de la ligne\n    - ouvrir ce fichier CSV en mode `append` pour écrire la ligne à la fin du fichier\n\n::: {#e6258889 .cell execution_count=31}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 103-117 solutions.py\n```\n\n### Exercice : rajouter des *headers* manquants\n\n\nDans l'exercice précédent, nous avons découpé le fichier CSV des départements français en plusieurs fichiers CSV, un par région. Mais nous n'avons pas inclus dans les différents fichiers le *header*, i.e. la première ligne qui contient les noms de colonnes. On va donc l'ajouter manuellement à chacun des fichiers CSV créés lors de l'exercice précédent.\n\nVoici la liste des opérations à effectuer :\n- lire le fichier des départements complet et récupérer le `header` dans une liste avec la fonction `next`\n- enregistrer dans une liste les chemins des différents fichiers CSV contenus dans le dossier `dep` avec la méthode `glob` de `pathlib` (cf. tutoriel précédent)\n- pour chaque chemin :\n    - ouvrir le fichier CSV déjà existant, et récupérer les données sous forme d'une liste de listes (une liste par ligne)\n    - ouvrir le fichier CSV en écriture pour le réinitialiser, écrire le header en premier lieu, puis écrire les données que l'on a au préalable sauvegardées dans une liste de liste\n\n::: {#62e8f073 .cell execution_count=32}\n``` {.python .cell-code}\n# Testez votre réponse dans cette cellule\n```\n:::\n\n\n```{python} tags=[]\n# Exécuter cette cellule pour afficher la solution\n%load -r 121-141 solutions.py\n```\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.10.12\n---\n",
    "supporting": [
      "tutorial_files"
    ],
    "filters": []
  }
}