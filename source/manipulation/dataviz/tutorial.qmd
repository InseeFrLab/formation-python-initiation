---
title: "Introduction à la visualisation de données"
abstract: "Exploration des bases de la visualisation de données avec Python : les graphiques simples de Pandas, les visualisations esthétiques de Seaborn, et les personnalisations avancées de Matplotlib"
execute:
    echo: true
    eval: false
---

La visualisation de données (ou *dataviz*) est un outil indispensable pour faciliter la compréhension des données et mettre en lumière des phénomènes à partir de celles-ci, ainsi que pour favoriser une communication efficace des résultats des analyses. C'est néanmoins un domaine qui dépasse largement la seule compétence technique : les meilleures visualisations sont celles qui sont adaptées à la donnée qu'elles représentent, et qui parviennent à raconter une histoire à partir de celles-ci (*data storytelling*). Ce tutoriel ne vise donc pas à présenter en détails le sujet, mais propose une introduction aux principaux outils existants en `Python` pour produire des visualisations de données.

Nous commencerons notre exploration par les graphiques intégrés dans `Pandas`, très simples et donc parfaits pour une analyse rapide des données. Puis, nous découvrirons `Seaborn`, une librairie qui permet de créer des visualisations attrayantes en très peu de lignes de code. Enfin, nous finirons par aborder `Matplotlib`, la très complète librairie de référence pour la visualisation en `Python`, sur laquelle les deux précédentes sont basées.


## Pandas

Comme nous l'avons vu dans le TP consacré, la librairie Pandas offre des outils nombreux et puissants pour manipuler les données tabulaires. Mais il est également équipé d'outils intégrés pour les visualiser. En particulier, la méthode `.plot()` permet de produire simplement des visualisations rapides des données analysées.

### La méthode `.plot()`

La méthode [.plot()](https://pandas.pydata.org/docs/user_guide/visualization.html#basic-plotting-plot), intégrée aux Series et aux DataFrames, simplifie le processus de création de graphiques en permettant de générer des visualisations standards avec une ligne de code, directement à partir de la structure de donnée. En coulisse, `.plot()` fait appel à Matplotlib pour le rendu graphique, ce qui signifie que tout graphique généré par Pandas peut être personnalisé davantage avec les fonctions de Matplotlib. Cette intégration offre un équilibre entre la commodité pour des tâches de visualisation rapides et la puissance de Matplotlib pour des besoins de personnalisation plus poussés, faisant de `.plot()` le point de départ idéal pour la visualisation de données en Python.

### Exemples de graphiques

Même si la méthode `.plot()` permet de produire simplement et rapidement des graphiques, les possibilités sont très nombreuses et dépendent des données en entrée. Dans cette section, nous proposons quelques exemples standards pour comprendre le fonctionnement de la méthode. Pour découvrir plus de possibilités, on pourra s'inspirer des nombreux exemples de la [documentation officielle](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html).

Générons des données de synthèse imitant les données de caisse, qu'on utilisera comme base des graphiques.

```{python}
import pandas as pd
import numpy as np

# Configuration pour la reproductibilité
np.random.seed(0)

# Générer une plage de dates sur un mois
dates = pd.date_range(start='2023-01-01', end='2023-01-31', freq='D')

# Simuler des données de caisse pour le mois
data = {
    'Date': np.random.choice(dates, 100),
    'Transaction_ID': np.arange(100) + 1,
    'COICOP': np.random.choice(['01.1.1', '02.1.1', '03.1.1', '04.1.1'], 100),
    'Enseigne': np.random.choice(['Carrefour', 'Casino', 'Lidl', 'Monoprix'], 100),
    'Prix': np.round(np.random.uniform(0.5, 20.0, 100), 2),  # Prix entre 0,5 et 20 euros
    'Quantité': np.random.randint(1, 5, 100)  # Quantité entre 1 et 4
}

# Créer le DataFrame
df_caisse = pd.DataFrame(data)

# Trier par date pour la cohérence
df_caisse = df_caisse.sort_values(by='Date').reset_index(drop=True)

# Afficher les premières lignes des données de caisse
print(df_caisse.head())
```

#### Nuage de points (*scatter plot*)

```{python}
df.plot(x='Ventes', y='Coûts', kind='scatter', color='green')
```

#### Diagrammes à barres (*bar chart*)

Les diagrammes en bâtons sont idéaux pour la comparaison visuelle de différentes catégories.

```{python}
df_caisse['Enseigne'].value_counts().plot(kind='bar')
```

#### Histogrammes (*histogram*)

Les histogrammes aident à comprendre la distribution d'une variable numérique.

```{python}
df_caisse['Prix'].plot(kind='hist', bins=20)
```

#### Graphique linéaire (*lineplot*)

```{python}
df_caisse.groupby('Date')['Prix'].sum().plot(kind='line')
```


### Personnalisation

- **Titres et étiquettes**:
Ajouter des titres et des étiquettes aux axes pour rendre vos graphiques compréhensibles.

```python
df.plot(kind='bar')
plt.title('Titre du Graphique')
plt.xlabel('Axe X')
plt.ylabel('Axe Y')
```

- **Modification des couleurs**:
Vous pouvez également personnaliser les couleurs pour améliorer l'esthétique ou la clarté du graphique.

```python
df.plot(kind='line', color='red')
```

- **Légendes**:
Les légendes sont cruciales lorsque votre graphique contient plusieurs séries ou catégories.

```python
df.plot(kind='line')
plt.legend(['Série 1', 'Série 2'])
```

## Seaborn

## Matplotlib
