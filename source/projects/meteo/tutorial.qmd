---
title: Projet 2 - Interaction avec des APIs
abstract: "Ce projet vise à introduire au requêtage d'API et à la manipulation de données qui en sont issues, en utilisant des fonctions afin de faciliter la reproductibilité des analyses."
execute:
    echo: true
    eval: false
---

## Contexte du projet

Il y a certains jours où l'on serait bien resté en télétravail.. Parmi ceux-là, ces jours à la fois humides et venteux où il est impossible de maintenir une coiffure décente, malgré tous ses efforts. Pourrait-on utiliser `Python` pour prédire ce que les anglo-saxons nomment des *bad hair day* ("mauvais jour de cheveux") ?

L'objectif du projet est de construire un *bad hair index* ("indice de mauvais jour de cheveux") à partir des données météorologiques et de représenter graphiquement l'évolution de cette indice afin de déterminer à l'avance les jours où l'on ferait mieux de rester bien au chaud. Afin d'obtenir les données adéquates, nous allons requêter des APIs.

Une API (Interface de Programmation d'Application) est un ensemble de règles et de spécifications que les applications suivent pour communiquer entre elles. Elle permet à votre code d'**accéder à des fonctionnalités externes ou à des données**, comme celles de bases de données météorologiques ou de services de localisation. Lorsqu'on parle de requêtage d'une API, cela se fait généralement via le **protocole HTTP**, qui est le même protocole utilisé pour charger des pages web. Dans ce tutoriel, nous utiliserons le package [requests](https://fr.python-requests.org/en/latest/), qui simplifie le processus de requêtage et de gestion de réponses HTTP.

Les APIs que nous allons utiliser sont :

- [Nominatim](https://nominatim.org/release-docs/latest/api/Overview/) : une API de géocodage proposée par **OpenStreetMap** qui nous permet de convertir un nom de lieu en coordonnées géographiques.
- [Open-Meteo Weather Forecast](https://open-meteo.com/en/docs) : une API qui fournit des prévisions météorologiques détaillées. 

Commençons par importer les packages dont nous aurons besoin au cours de ce projet.

```{python}
import requests
import pandas
import seaborn as sns
import matplotlib.pyplot as plt

import solutions
```

## Partie 1 : récupération des coordonnées géographiques pour une localisation donnée

L'API de prédiction d'open-meteo prend en entrée les coordonnées géographiques (latitude, longitude) du lieu où seront réalisées les prédictions. On pourrait récupérer manuellement les coordonnées du lieu qui nous intéresse, mais cela limiterait la reproductibilité de nos analyses avec d'autres lieux que celui choisi. On va donc utiliser une seconde API, `Nominatim`, pour obtenir ces coordonnées pour un lieu donné.

Lorsque l'on travaille à partir d'une API, la première étape est toujours de lire sa documentation. C'est elle qui indique à quelle adresse nous devons envoyer nos requêtes, sous quel format, et ce que va nous répondre l'API. Dans notre cas, la docuemntation de `Nominatim` se trouve à [cette adresse](https://nominatim.org/release-docs/develop/api/Overview/). N'hésitez pas à la parcourir rapidement pour évaluer les possibilités de l'API.

### Question 1

La première caractéristique essentielle d'une API est le *endpoint*, c'est à dire l'URL à laquelle on va envoyer des requêtes. Dans notre cas, on va utiliser le *endpoint* `/search` dans la mesure où l'on veut trouver un objet géographique (des coordonnées) à partir d'un nom de localisation. La [page de documentation]([/search](https://nominatim.org/release-docs/develop/api/Search/)) associée à ce *endpoint* nous donne toutes les informations dont nous avons besoin :
- le format d'une requête est `https://nominatim.openstreetmap.org/search?<params>` où `<params>` doit être remplacé par les paramètres de la requête, séparés par le symbole `&`
- dans la section [Structured Query](https://nominatim.org/release-docs/develop/api/Search/#structured-query), on voit que l'API admet comme paramètres `country` (pays) et `city` (ville), que l'on va utiliser pour paramétrer notre requête. 

Définissez une fonction `build_request_nominatim` qui construit le lien de la requête pour un pays et une ville donnée.

#### Résultat attendu

```{python}
url_request_nominatim = solutions.build_request_nominatim("France", "Montrouge")
url_request_nominatim
```

#### À vous de jouer !

```{python}
def build_request_nominatim(country, city):
    # Votre code ici
    return url_request
```

```{python}
url_request_nominatim = build_request_nominatim("France", "Montrouge")
url_request_nominatim
```

### Question 2

La prochaine étape est d'envoyer notre requête paramétrisée à l'API. Pour la tester au préalable, on peut simplement mettre l'adresse dans un navigateur et voir ce que nous renvoie l'API. Si les résultats ont l'air cohérent, on peut continuer. Si l'API nous renvoie un code d'erreur, il y a sûrement une erreur à trouver dans la requête. 

Pour effectuer cette requête à partir de `Python` afin d'en récupérer les résultats, on utilise la fonction `requests.get()` à laquelle on fournit comme seul paramètre l'URL de la requête. On obtient en retour un objet "réponse", dont on peut extraire le contenu `JSON` sous forme d'un dictionnaire `Python` en lui appliquant la méthode `.json()`. Il faut alors parcourir le dictionnaire pour en extraire les informations pertinentes ; dans notre cas : la latitude et la longitude.

Définissez une fonction `get_lat_long` qui récupère la latitude et la longitude (centrale) pour un pays et une ville donnée.

#### Résultat attendu

```{python}
lat, long = solutions.get_lat_long(query=url_request_nominatim)
print(lat, long)
print(type(lat))
print(type(long))
```

#### À vous de jouer !

```{python}
def get_lat_long(query):
    # Votre code ici
    return latitude, longitude
```

```{python}
lat, long = get_lat_long(query=url_request_nominatim)
print(lat, long)
print(type(lat))
print(type(long))
```

## Partie 2 : récupération des prévisions météorologiques

Maintenant que nous pouvons récupérer les coordonnées associées à une localisation donnée, nous pouvons requêter l'API `open-meteo.com` pour obtenir les données de prédiction météo associées à ces coordonnées. Là encore, la première étape est de s'intéresser à la documentation ([page d'accueil](https://open-meteo.com/), [doc](https://open-meteo.com/en/docs)), qui nous fournit plusieurs informations :
- le *endpoint* pour l'API de prédiction est `https://api.open-meteo.com/v1/forecast`
- l'API attend en entrée une `latitude` et une `latitude`, ainsi que les variables météorologiques souhaitées. Pour notre problématique, nous allons récupérer des informations sur le taux d'humidité (`relativehumidity_2m`) et la vitesse du vent (`windspeed_10m`)
- par défaut, l'API renvoie des prédictions à 7 jours

### Question 3

Sachant toutes ces informations et en vous aidant de la documentation, définissez une fonction `build_request_open_meteo` qui construit le lien de la requête pour une latitude et une longitude donnée. Là encore, il est possible de tester la validité de la requête en exécutant le lien dans un navigateur et en vérifiant que les résultats retournés paraissent cohérents.

#### Résultat attendu

```{python}
url_request_open_meteo = solutions.build_request_open_meteo(latitude=lat, longitude=long)
url_request_open_meteo
```

#### À vous de jouer !

```{python}
def build_request_open_meteo(latitude, longitude):
    # Votre code ici
    return url_request
```

```{python}
url_request_open_meteo = build_request_open_meteo(latitude=lat, longitude=long)
url_request_open_meteo
```

### Question 4

A nouveau, on utilise la fonction `requests.get()` pour soumettre la requête à l'API. On obtient en retour un objet "réponse", dont on peut extraire le contenu `JSON` sous forme d'un dictionnaire `Python` en lui appliquant la méthode `.json()`.

Définissez une fonction `get_meteo_data` qui récupère le dictionnaire complet de données retourné par l'API suite à notre requête.

#### Résultat attendu

```{python}
predictions = solutions.get_meteo_data(url_request_open_meteo)
type(predictions)
```

```{python}
wrong_request = solutions.build_request_open_meteo(latitude=lat, longitude="dix-sept-virgule-quatre")
output = solutions.get_meteo_data(wrong_request)
print(output)
```

#### À vous de jouer !

```{python}
def build_request_open_meteo(latitude, longitude):
    # Votre code ici
    return url_request
```

```{python}
predictions = get_meteo_data(url_request_open_meteo)
type(predictions)
```

```{python}
wrong_request = build_request_open_meteo(latitude=lat, longitude="dix-sept-virgule-quatre")
output = get_meteo_data(wrong_request)
print(output)
```

### Question 5

Afin de bien comprendre la structure des données que nous avons récupérées, explorons les différents niveaux et types des clés et des valeurs.

```{python}
# Exploration des données
print(type(data))
print(data.keys())
print(type(data["hourly"]))
print(data["hourly"].keys())
print(type(data["hourly"]["time"]))
```

```{python}
# Afficher les données
print(data['hourly']["time"][:5])
print(data['hourly']["time"][-5:])
print()
print(data['hourly']["relativehumidity_2m"][:5])
print(data['hourly']["windspeed_10m"][:5])
```

## Partie 3 : construction et visualisation d'un *bad hair index*

`Pandas` est une bibliothèque puissante pour la manipulation de données. Elle facilite la gestion, la transformation et l'analyse des données.

```{python}
data_dict = {
    'time': data['hourly']["time"],
    'humidity': data['hourly']["relativehumidity_2m"],
    'wind_speed': data['hourly']["windspeed_10m"]
}

df = pd.DataFrame(data_dict)
df['time'] = pd.to_datetime(df['time'])  # Convertir la colonne time en objet datetime
df.head()
```

Nous définissons cet indice comme le produit de l'humidité relative et de la vitesse du vent. Il s'agit d'une mesure ludique de la probabilité d'avoir une "mauvaise coiffure" en raison des conditions météorologiques.

```{python}
df['bad_hair_index'] = df['humidity'] * df['wind_speed']

df.head()
```

```{python}
df['day'] = df['time'].dt.day
df_daily_mean = df.groupby('day').agg({'bad_hair_index': 'mean'}).reset_index()
df_daily_mean.head()
```

```{python}
sns.lineplot(x='day', y='bad_hair_index', data=df_daily_mean)
plt.title("Évolution du Bad Hair Index moyen sur 7 jours")
plt.xlabel('Jour')
plt.ylabel('Bad Hair Index moyen')
```

```{python}
df['hour'] = df['time'].dt.hour
df_hourly_mean = df.groupby('hour').agg({'bad_hair_index': 'mean'}).reset_index()
df_hourly_mean.head()
```

```{python}
sns.lineplot(x='hour', y='bad_hair_index', data=df_hourly_mean)
plt.title("Moyenne du Bad Hair Index heure par heure sur 7 jours")
plt.xlabel('Heure')
plt.ylabel('Bad Hair Index Moyen')
```
