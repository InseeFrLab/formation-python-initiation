::: {.content-visible when-profile="fr"}
# Structures de données 1 : listes et tuples

Dans ce tutoriel, nous allons nous intéresser à des structures de données de base en Python : les **listes** et les **tuples**. Les structures de données peuvent être vues comme des conteneurs car ils permettent de stocker, d'organiser et d'accéder à des données. Les listes et les tuples sont des **conteneurs séquentiels** : les éléments qu'ils contiennent sont **ordonnés**, et leur position est enregistrée dans un **index**.

## Listes

### Définition

Dans le tutoriel précédent, nous avons vu que les chaînes de caractères étaient des **séquences** de caractères. Les listes sont également des séquences, c'est à dire des suites ordonnées d'éléments, mais plus générales : les éléments peuvent être de différente nature.

Les listes sont construites avec des crochets **[]**, et les éléments de la liste sont séparés par des virgules.

Assignons une première liste à une variable `a` :


```{python}
a = [1, 2, 3]
print(a)
```

La liste `a` est constituée d'entiers, mais une liste peut en pratique contenir des objets de tout type.


```{python}
b = ["une séquence", 56, "d"]
print(b)
```

Il est notamment possible de créer des listes de listes (et ainsi de suite), ce qui permet de créer des structures hiérarchiques de données.


```{python}
c = ["une séquence", 56, ["cette liste est imbriquée", 75, "o"]]
print(c)
```

Une liste imbriquée peut aussi être construite à partir de listes déjà définies.


```{python}
item1 = ["cafe", "500g"]
item2 = ["biscuits", "20"]
item3 = ["lait", "1L"]
inventaire = [item1, item2, item3]
print(inventaire)
```

On verra cependant dans le prochain tutoriel que les dictionnaires sont généralement des structures de données souvent plus adaptées que les listes pour représenter des données sous forme hiérarchique.

### Longueur d'une liste

Comme les chaînes de caractères, il est possible d'utiliser la fonction `len` pour compter le nombre d'éléments présents dans une liste.


```{python}
d = ["ceci", "est", "une", "liste"]
len(d)
```

### Indexation

Les listes étant des séquences, elles s'indexent de la même manière que les chaînes de caractères. Il est notamment important de se rappeler que la numérotation des positions commence à 0 en Python.


```{python}
# Troisième élément de la liste a
print(a[2])
```

Bien entendu, il n'est pas possible de demander un élément qui n'existe pas. Python renvoie une erreur nous indiquant que l'index demandé est hors limites.


```{python}
print(a[5])
```

Pour indexer une liste contenue dans une autre liste, on utilise une double indexation.


```{python}
# Premier élément de la sous-liste qui est à la deuxième position de la liste c
print(c[2][0])
```

En termes d'indexation, tout ce qui était possible sur les chaînes caractères l'est également avec les listes.


```{python}
# Tous les éléments à partir de la 1ère position
print(b[1:])
```


```{python}
# Inverser une liste
print(a[::-1])
```

### Modification d'éléments

Il est possible de modifier les éléments d'une liste manuellement, avec une syntaxe similaire à l'assignation de variable.


```{python}
# Réassignation d'un élément
d = [1, 2, "toto", 4]
d[2] = 3
print(d)
```


```{python}
# Substitution d'un élément
a = [1, 2, 3]
b = ["do", "re", "mi"]
b[0] = a[2]
print(b)
```

### Suppression d'éléments

L'instruction `del` permet de supprimer un élément par position. Les éléments qui se trouvaient après l'élément supprimé voient donc leur index réduit de 1.


```{python}
e = [1, "do", 6]
print(e)
print(e[2])

del e[1]
print(e)
print(e[1])
```

### Quelques propriétés utiles

Là encore, on retrouve des propriétés inhérentes aux séquences.


```{python}
# Concaténation
[1, 2, 3] + ["a", 12]
```


```{python}
# Réplication
["a", "b", "c"] * 3
```

### Quelques méthodes utiles

A l'instar des chaînes de caractères, les listes ont de nombreuses méthodes *built-in*, qui s'utilisent selon le format `objet.methode(parametres)`. Les plus utiles sont présentées ci-dessous ; d'autres méthodes seront utilisées dans le cadre des exercices de fin de section.


```{python}
# Ajouter un élément
a = [1, 2, 3]
a.append(4)
print(a)
```


```{python}
# Supprimer un élément par position
b = ["do", "re", "mi"]
b.pop(0)
print(b)
```


```{python}
# Supprimer un élément par valeur
b = ["do", "re", "mi"]
b.remove("mi")
print(b)
```


```{python}
# Inverser une liste
l = [1, 2, 3, 4, 5]
l.reverse()
print(l)
```


```{python}
# Trouver la position d'un élément
b = ["a", "b", "c", "d", "e"]
b.index("d")
```

## Tuples

### Définition

Les **tuples** sont une autre structure de données basique en Python, semblable à celle des listes dans leur fonctionnement. Il y a cependant une différence fondamentale : là où les éléments d'une liste peuvent être modifiés par position comme on l'a vu précédemment, les tuples sont **non-modifiables** (*immutable*). Ainsi, les éléments d'un tuple ne peuvent pas être modifiés sans redéfinir complètement le tuple. 

Quand est-il pertinent d'utiliser un tuple plutôt qu'une liste ? En pratique, les tuples sont beaucoup moins fréquemment utilisés que les listes. On utilise généralement les tuples pour **stocker des données qui n'ont pas vocation à être modifiées** lors de l'exécution de notre programme Python. Cela permet de se prémunir contre des problèmes d'intégrité de données, c'est à dire de modification non-voulue des données d'entrée. On s'évite ainsi parfois de longues et pénibles séances de debugging.

Une autre différence, mineure celle-ci, est que les tuples s'écrivent avec des **parenthèses** au lieu des crochets. Les différents éléments sont toujours séparés par des virgules.


```{python}
x = (1, 2, "mi", "fa", 5)
x
```

Afin de bien faire la différence avec l'usage normal des parenthèses (dans les calculs ou pour délimiter les expressions), un tuple à un seul élément se définit avec une virgule après le premier élément.


```{python}
x1 = ("a", )
x1
```

Vérifions qu'il est impossible de modifier ou d'ajouter un élément à un tuple.


```{python}
t = ("do", "rez", "mi")
t[1] = "re"
```


```{python}
t = ("do", "re", "mi")
t.append("fa")
```

### Fonctionnement

Les tuples s'indexent comme les listes.


```{python}
print(x[0])
print(x[3:5])
```

Et peuvent également s'utiliser de manière hiérarchique.


```{python}
t1 = ("a", "b", "c")
t2 = (1, 2, 3)
t3 = (t1, "et", t2)

print(t3)
print(t3[2][1])
```

Les tuples partagent certaines méthodes *built-in* avec les listes : celles qui ne provoquent pas de modification de l'objet.


```{python}
t = ("do", "re", "mi")
t.index("do")
```


```{python}
t = ("do", "re", "mi", "re", "do")
t.count("re")
```

### Conversion

Les fonctions `list` et `tuple` permettent de convertir une liste en tuple et inversement.


```{python}
tuple(["do", "re", "mi"])
```


```{python}
list((1, 2, 3, 4, 5))
```

Ces fonctions ont d'autres usages en pratique, que nous verrons en exercice.

## Exercices

### Questions de compréhension


- Pourquoi dit-on des listes et des tuples que ce sont des conteneurs ?

- Quel est le point commun entre les listes et les chaînes de caractères ?

- Comment est enregistré l'ordre des éléments dans une séquence en Python ?

- Quelle est la différence fondamentale entre une liste et un tuple ?

- Dans quel cas aura-t-on plutôt intérêt à utiliser un tuple qu'une liste ?

- Peut-on avoir des éléments de types différents (ex : `int` et `string`) dans une même liste ? Dans un même tuple ?

<details>
<summary>Afficher la solution</summary>

- 1/ On dit que les listes et les tuples sont des conteneurs parce qu'ils permettent de stocker et d'organiser une collection d'éléments de différente nature dans une unique structure de données. 

- 2/ Les listes et les chaînes de caractères sont toutes deux des séquences ordonnées d'éléments, qui peuvent être requêtées par position. Dans le cas d'une chaîne de caractères, chaque élément est lui même une chaîne de caractères. Dans le cas d'une liste, les éléments peuvent être de différente nature (chaîne de caractère, liste, tuple, etc.)

- 3/ Chaque élément d'une séquence a une position unique, appelée indice, qui commence à 0 pour le premier élément, 1 pour le second, et ainsi de suite. Les éléments sont stockés dans l'ordre où ils sont ajoutés.

- 4/ Une liste est un objet mutable : il est possible d'ajouter, supprimer ou modifier des éléments d'une liste après sa création. A l'inverse, les tuples sont immutables : une fois qu'un tuple est défini, on ne peut ni changer ses éléments, ni ajouter ou supprimer des éléments.

- 5/ En vertu de leur immutabilité, les tuples sont particulièrement adaptés pour stocker des données dont on voudrait s'assurer qu'elle ne seront pas modifiés par erreur. Par exemples, pour stocker des constantes d'un algorithme (paramètres, coordonnées géographiques, chemin de fichier, etc).

- 6/ Oui, il est tout à fait possible d'avoir des éléments de types différents dans une même liste ou dans un même tuple. Ces éléments peuvent être de types de base (ex : `int` et `string`), mais également des conteneurs (ex : liste, tuple, dictionnaire, etc.).

</details>

### Les 4 saisons

Créez 4 listes portant les noms des 4 saisons, contenant chacune les noms des mois associés (les mois de changement de saison seront attribués à la saison précédente). Puis créez une liste `saisons` contenant les 4 listes. Essayez de prévoir ce que vont renvoyer (type de l'objet, nombre d'éléments et contenu) les instructions suivantes, puis vérifiez le. 


- `saisons`

- `saisons[0]`

- `saisons[0][0]`

- `saisons[1][-1]`

- `saisons[2][:3]`

- `saisons[1][1:2] + saisons[-1][3:]`

- `saisons[2:]`

- `saisons + saisons[0]`

- `saisons[3][::]`

- `saisons[3][::-1]`

- `saisons * 3`

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
printemps = ["avril", "mai", "juin"]
ete = ["juillet", "aout", "septembre"]
automne = ["octobre", "novembre", "decembre"]
hiver = ["janvier", "fevrier", "mars"]

saisons = [printemps, ete, automne, hiver]

l = saisons
print(type(l), len(l), l, "\n")

l = saisons[0]
print(type(l), len(l), l, "\n")

l = saisons[0][0]
print(type(l), len(l), l, "\n")

l = saisons[1][-1]
print(type(l), len(l), l, "\n")

l = saisons[2][:3]
print(type(l), len(l), l, "\n")

l = saisons[1][1:2] + saisons[-1][3:]
print(type(l), len(l), l, "\n")

l = saisons[2:]
print(type(l), len(l), l, "\n")

l = saisons + saisons[0]
print(type(l), len(l), l, "\n")

l = saisons[3][::]
print(type(l), len(l), l, "\n")

l = saisons[3][::-1]
print(type(l), len(l), l, "\n")

l = saisons * 3
print(type(l), len(l), l, "\n")
```

</details>

### Faire ses gammes

En ajoutant, supprimant et modifiant des éléments, nettoyez la liste suivante pour qu'elle contienne les notes de musique "do re mi fa sol la si" dans le bon ordre.

`l = ["do", "re", "re", "re", "fa", "sol", "solsi", "la"]`

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
l = ["do", "re", "re", "re", "fa", "sol", "solsi", "la"]

del l[1]  # On aurait aussi pu utiliser : l.pop(1)
l[2] = "mi"
del l[5]
l.append("si")

print(l)
```

Cet exemple visait simplement à pratiquer la modification et la suppression d'éléments. En pratique, il aurait été bien plus simple de directement créer la liste correcte.

</details>

### Inversion de liste

Proposez deux méthodes pour inverser la liste `["une", "liste", "quelconque"]`. Quelle est la différence majeure entre les deux méthodes ?

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
l1 = ["une", "liste", "quelconque"]
l1.reverse()
print(l1)

l2 = ["une", "liste", "quelconque"]
print(l2[::-1])
print(l2)
```

La méthode `reverse` modifie la liste "en place" : la liste est durablement inversée après l'avoir exécutée. En revanche, la méthode qui inverse la liste via l'indexation renvoie une nouvelle liste et ne modifie pas l'existante. Pour que ce changement soit durable, il faudrait donc écraser la liste existante, ou bien en créer une nouvelle.

```python
l2 = l2[::-1]
print(l2)
```

</details>

### Pop'it

Nous avons vu que l'instruction `ma_liste.pop(i)` supprimait le i-ème élément de la liste `ma_liste`. A l'aide de la documentation Python ou d'une recherche sur Google, déterminez le comportement par défaut de cette méthode, c'est à dire ce qu'il se passe lorsqu'on ne donne aucun paramètre à la fonction `pop`. Vérifiez que vous observez bien ce comportement à l'aide d'un exemple de votre choix.

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
l = ["do", "re", "mi"]
l.pop()
print(l)
```

</details>

### Min et max de différentes listes

Il existe beaucoup d'autres méthodes *built-in* pour les listes que celles que nous avons déjà vues. Par exemple : `min` et `max`. Vérifiez leur comportement : 

- sur une liste composée uniquement d'objets numériques (`int` et `float`) ;

- sur une liste composée uniquement de chaînes de caractères ;

- sur une liste composée d'un mélange d'objets numériques et textuels.

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
a = [5, 800, 9.92, 0]
b = ["do", "re", "mi", "fa", "sol"]
c = [1, "melange", "des", 2]

print(min(a), max(a))
print(min(b), max(b))
print(min(c), max(c))
```

La troisième expression renvoie une erreur : il n'existe pas de relation d'ordre pertinente.

</details>

### Liste vide

Essayer de créer une liste vide. Vérifiez son type. Quel intérêt pourrait avoir un tel objet ?

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
l = []
print(l)
print(type(l))
```

On peut donc effectivement créer une liste vide. Mais quel intérêt ? Un usage très fréquent est d'initialiser une liste, que l'on va ensuite remplir au fur et à mesure des itérations d'une boucle. Les boucles feront l'objet d'un prochain tutoriel ; mais voici un exemple simple d'un tel usage.

```python
for i in range(10):
    l.append(i)
    
print(l)
```

</details>

### La fonction `list`

Dans le tutoriel, nous avons vu les fonctions `list` et `tuple` qui permettent de passer d'un type à l'autre. En réalité, le fonctionnement de ces fonctions est plus subtil : le code `list(mon_objet)` renvoie la "version liste" de cet objet, de la même manière par exemple que `str(3)` renvoie `'3'`, c'est à dire la version *string* de l'entier `3`.

A l'aide de la fonction `list`, trouver les "versions liste" des objets suivants :

- le tuple `a = (1, 2, 3)` ;

- la chaîne de caractères `b = "bonjour"` ;

- l'entier `c = 5`

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
a = (1, 2, 3)
print(list(a))

b = "bonjour"
print(list(b))

c = 5
print(list(c))
```

La dernière expression renvoie une erreur : un entier n'est pas une séquence, une "version liste" n'a donc pas sens.
On peut par contre bien entendu créer une liste avec pour seul élément 5.

```python
d = [5]
print(d)
```

</details>

### Immutabilité des tuples

Nous avons vu que les tuples avaient la particularité d'être non-modifiables. Mais est-ce que cette propriété se transfère de manière récursive ? Par exemple, est-ce qu'une liste contenue dans un tuple est-elle même non-modifiable ? Vérifiez à l'aide d'un exemple de votre choix.

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
t = (1, 2, ["une", "liste"])
t[2][0] = 26
print(t)
```

Verdict : la non-modifiabilité ne s'applique qu'au premier niveau. Elle ne se transfère pas aux sous-éléments.

</details>

### Dissociation de séquences

Lisez la partie concernant l'agrégation et la dissociation de séquences dans la [documentation Python](https://docs.python.org/fr/3/tutorial/datastructures.html#tuples-and-sequences). La dissociation est une propriété souvent utilisée en pratique. Vérifiez qu'elle fonctionne sur les différents objets séquentiels que nous avons vus jusqu'à maintenant (chaînes de caractères, listes et tuples).

```{python}
# Testez votre réponse dans cette cellule

```

<details>
<summary>Afficher la solution</summary>

```python
x, y, z = "abc"
print(y)

a, b, c, d = ["do", "re", "mi", "fa"]
print(c)

r, s, t, u = ("un", "tuple", "de", "test")
print(r)
```

</details>

:::










::: {.content-visible when-profile="en"}
# Data Structures 1: Lists and Tuples

In this tutorial, we will focus on basic data structures in Python: **lists** and **tuples**. Data structures can be seen as containers because they allow you to store, organize, and access data. Lists and tuples are **sequential containers**: the elements they contain are **ordered**, and their position is recorded in an **index**.

## Lists

### Definition

In the previous tutorial, we saw that strings were **sequences** of characters. Lists are also sequences, meaning ordered series of elements, but more general: the elements can be of different types.

Lists are constructed with square brackets **[]**, and the elements of the list are separated by commas.

Let's assign a first list to a variable `a`:

```{python}
a = [1, 2, 3]
print(a)
```

The list `a` consists of integers, but a list can practically contain objects of any type.

```{python}
b = ["a sequence", 56, "d"]
print(b)
```

It is also possible to create lists of lists (and so on), which allows for creating hierarchical data structures.

```{python}
c = ["a sequence", 56, ["this list is nested", 75, "o"]]
print(c)
```

A nested list can also be constructed from already defined lists.

```{python}
item1 = ["coffee", "500g"]
item2 = ["biscuits", "20"]
item3 = ["milk", "1L"]
inventory = [item1, item2, item3]
print(inventory)
```

However, in the next tutorial, we will see that dictionaries are generally more suitable data structures than lists for representing hierarchical data.

### List Length

Like strings, you can use the `len` function to count the number of elements in a list.

```{python}
d = ["this", "is", "a", "list"]
len(d)
```

### Indexing

Since lists are sequences, they are indexed similarly to strings. It is important to remember that position numbering starts at 0 in Python.

```{python}
# Third element of the list a
print(a[2])
```

Of course, it is not possible to request an element that does not exist. Python returns an error indicating that the requested index is out of bounds.

```{python}
print(a[5])
```

To index a list contained within another list, use double indexing.

```{python}
# First element of the sublist at the second position of list c
print(c[2][0])
```

In terms of indexing, everything that was possible with strings is also possible with lists.

```{python}
# All elements from the 1st position
print(b[1:])
```

```{python}
# Reverse a list
print(a[::-1])
```

### Modifying Elements

It is possible to modify elements of a list manually, with a syntax similar to variable assignment.

```{python}
# Reassign an element
d = [1, 2, "toto", 4]
d[2] = 3
print(d)
```

```{python}
# Substitute an element
a = [1, 2, 3]
b = ["do", "re", "mi"]
b[0] = a[2]
print(b)
```

### Deleting Elements

The `del` statement allows you to delete an element by position. The elements that were after the deleted element then have their index reduced by 1.

```{python}
e = [1, "do", 6]
print(e)
print(e[2])

del e[1]
print(e)
print(e[1])
```

### Some Useful Properties

Again, we find properties inherent to sequences.

```{python}
# Concatenation
[1, 2, 3] + ["a", 12]
```

```{python}
# Replication
["a", "b", "c"] * 3
```

### Some Useful Methods

As with strings, lists have many built-in methods, which are used in the format `object.method(parameters)`. The most useful ones are presented below; other methods will be used in the end-of-section exercises.

```{python}
# Add an element
a = [1, 2, 3]
a.append(4)
print(a)
```

```{python}
# Delete an element by position
b = ["do", "re", "mi"]
b.pop(0)
print(b)
```

```{python}
# Delete an element by value
b = ["do", "re", "mi"]
b.remove("mi")
print(b)
```

```{python}
# Reverse a list
l = [1, 2, 3, 4, 5]
l.reverse()
print(l)
```

```{python}
# Find the position of an element
b = ["a", "b", "c", "d", "e"]
b.index("d")
```

## Tuples

### Definition

**Tuples** are another basic data structure in Python, similar to lists in their functionality. However, there is a fundamental difference: while the elements of a list can be modified by position as we saw earlier, tuples are **immutable**. Thus, the elements of a tuple cannot be changed without completely redefining the tuple.

When is it relevant to use a tuple rather than a list? In practice, tuples are much less frequently used than lists. Tuples are generally used to **store data that is not meant to be modified** during the execution of our Python program. This helps prevent data integrity issues, i.e., unwanted modification of input data. This can sometimes save long and tedious debugging sessions.

Another minor difference is that tuples are written with **parentheses** instead of square brackets. The different elements are still separated by commas.

```{python}
x = (1, 2, "mi", "fa", 5)
x
```

To clearly distinguish from the normal use of parentheses (in calculations or to delimit expressions), a tuple with a single element is defined with a comma after the first element.

```{python}
x1 = ("a", )
x1
```

Let's verify that it is impossible to modify or add an element to a tuple.

```{python}
t = ("do", "rez", "mi")
t[1] = "re"
```

```{python}
t = ("do", "re", "mi")
t.append("fa")
```

### Functionality

Tuples are indexed like lists.

```{python}
print(x[0])
print(x[3:5])
```

And can also be used hierarchically.

```{python}
t1 = ("a", "b", "c")
t2 = (1, 2, 3)
t3 = (t1, "and", t2)

print(t3)
print(t3[2][1])
```

Tuples share some built-in methods with lists: those that do not cause modification of the object.

```{python}
t = ("do", "re", "mi")
t.index("do")
```

```{python}
t = ("do", "re", "mi", "re", "do")
t.count("re")
```

### Conversion

The `list` and `tuple` functions allow you to convert a list to a tuple and vice versa.

```{python}
tuple(["do", "re", "mi"])
```

```{python}
list((1, 2, 3, 4, 5))
```

These functions have other practical uses, which we will see in exercises.

## Exercises

### Comprehension Questions

- Why are lists and tuples called containers?
- What is the common point between lists and strings?
- How is the order of elements in a sequence recorded in Python?
- What is the fundamental difference between a list and a tuple?
- When is it more advantageous to use a tuple rather than a list?
- Can you have elements of different types (e.g., `int` and `string`) in the same list? In the same tuple?

<details>
<summary>Show the solution</summary>

- 1/ Lists and tuples are called containers because they allow storing and organizing a collection of elements of different nature in a single data structure.

- 2/ Lists and strings are both ordered sequences of elements that can be queried by position. In the case of a string, each element is itself a string. In the case of a list, the elements can be of different nature (string, list, tuple, etc.).

- 3/ Each element of a sequence has a unique position, called an index, which starts at 0 for the first element, 1 for the second, and so on. The elements are stored in the order they are added.

- 4/ A list is a mutable object: you can add, delete, or modify elements of a list after its creation. In contrast, tuples are immutable: once a tuple is defined, you cannot change its elements, add or delete elements.

- 5/ Due to their immutability, tuples are particularly suitable for storing data that you want to ensure will not be modified by mistake. For example, to store constants of an algorithm (parameters, geographical coordinates, file paths, etc.).

- 6/ Yes, it is quite possible to have elements of different types in the same list or tuple. These elements can be of basic types (e.g., `int` and `string`), but also containers (e.g., list, tuple, dictionary, etc.).

</details>

### The 4 Seasons

Create 4 lists named after the 4 seasons, each containing the names of the associated months (months of changing seasons will be attributed to the previous season). Then

 create a list `seasons` containing the 4 lists. Try to predict what the following instructions will return (object type, number of elements, and content), then verify.

- `seasons`
- `seasons[0]`
- `seasons[0][0]`
- `seasons[1][-1]`
- `seasons[2][:3]`
- `seasons[1][1:2] + seasons[-1][3:]`
- `seasons[2:]`
- `seasons + seasons[0]`
- `seasons[3][::]`
- `seasons[3][::-1]`
- `seasons * 3`

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
spring = ["April", "May", "June"]
summer = ["July", "August", "September"]
autumn = ["October", "November", "December"]
winter = ["January", "February", "March"]

seasons = [spring, summer, autumn, winter]

l = seasons
print(type(l), len(l), l, "\n")

l = seasons[0]
print(type(l), len(l), l, "\n")

l = seasons[0][0]
print(type(l), len(l), l, "\n")

l = seasons[1][-1]
print(type(l), len(l), l, "\n")

l = seasons[2][:3]
print(type(l), len(l), l, "\n")

l = seasons[1][1:2] + seasons[-1][3:]
print(type(l), len(l), l, "\n")

l = seasons[2:]
print(type(l), len(l), l, "\n")

l = seasons + seasons[0]
print(type(l), len(l), l, "\n")

l = seasons[3][::]
print(type(l), len(l), l, "\n")

l = seasons[3][::-1]
print(type(l), len(l), l, "\n")

l = seasons * 3
print(type(l), len(l), l, "\n")
```

</details>

### Doing Scales

By adding, deleting, and modifying elements, clean up the following list so that it contains the musical notes "do re mi fa sol la si" in the correct order.

`l = ["do", "re", "re", "re", "fa", "sol", "solsi", "la"]`

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
l = ["do", "re", "re", "re", "fa", "sol", "solsi", "la"]

del l[1]  # You could also use: l.pop(1)
l[2] = "mi"
del l[5]
l.append("si")

print(l)
```

This example was simply to practice modifying and deleting elements. In practice, it would have been much simpler to directly create the correct list.

</details>

### List Reversal

Propose two methods to reverse the list `["a", "random", "list"]`. What is the major difference between the two methods?

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
l1 = ["a", "random", "list"]
l1.reverse()
print(l1)

l2 = ["a", "random", "list"]
print(l2[::-1])
print(l2)
```

The `reverse` method modifies the list "in place": the list is permanently reversed after executing it. In contrast, the method that reverses the list using indexing returns a new list and does not modify the existing one. To make this change permanent, you would need to overwrite the existing list or create a new one.

```{python}
l2 = l2[::-1]
print(l2)
```

</details>

### Pop'it

We saw that the `my_list.pop(i)` statement removes the i-th element from the list `my_list`. Using the Python documentation or a Google search, determine the default behavior of this method, i.e., what happens when no parameter is given to the `pop` function. Verify that you observe this behavior with an example of your choice.

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
l = ["do", "re", "mi"]
l.pop()
print(l)
```

</details>

### Min and Max of Different Lists

There are many more built-in methods for lists than those we have already seen. For example: `min` and `max`. Verify their behavior:

- on a list composed solely of numeric objects (`int` and `float`);
- on a list composed solely of strings;
- on a list composed of a mix of numeric and textual objects.

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
a = [5, 800, 9.92, 0]
b = ["do", "re", "mi", "fa", "sol"]
c = [1, "mix", "of", 2]

print(min(a), max(a))
print(min(b), max(b))
print(min(c), max(c))
```

The third expression returns an error: there is no relevant order relationship.

</details>

### Empty List

Try creating an empty list. Verify its type. What could be the use of such an object?

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
l = []
print(l)
print(type(l))
```

We can indeed create an empty list. But what is the use? A very common use is to initialize a list, which will then be filled as iterations of a loop progress. Loops will be the subject of a future tutorial; but here is a simple example of such use.

```{python}
for i in range(10):
    l.append(i)
    
print(l)
```

</details>

### The `list` Function

In the tutorial, we saw the `list` and `tuple` functions that allow converting from one type to the other. In reality, the functionality of these functions is more subtle: the code `list(my_object)` returns the "list version" of that object, just as `str(3)` returns `'3'`, i.e., the string version of the integer `3`.

Using the `list` function, find the "list versions" of the following objects:

- the tuple `a = (1, 2, 3)`;
- the string `b = "hello"`;
- the integer `c = 5`

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
a = (1, 2, 3)
print(list(a))

b = "hello"
print(list(b))

c = 5
print(list(c))
```

The last expression returns an error: an integer is not a sequence, so a "list version" does not make sense. However, it is of course possible to create a list with a single element 5.

```{python}
d = [5]
print(d)
```

</details>

### Immutability of Tuples

We saw that tuples are immutable. But does this property transfer recursively? For example, is a list contained in a tuple itself immutable? Verify with an example of your choice.

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
t = (1, 2, ["a", "list"])
t[2][0] = 26
print(t)
```

Verdict: immutability only applies to the first level. It does not transfer to sub-elements.

</details>

### Sequence Unpacking

Read the section on sequence packing and unpacking in the [Python documentation](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences). Unpacking is a commonly used feature in practice. Verify that it works on the various sequential objects we have seen so far (strings, lists, and tuples).

```{python}
# Test your answer in this cell

```

<details>
<summary>Show the solution</summary>

```{python}
x, y, z = "abc"
print(y)

a, b, c, d = ["do", "re", "mi", "fa"]
print(c)

r, s, t, u = ("a", "tuple", "of", "test")
print(r)
```

</details>

:::