::: {.content-visible when-profile="fr"}
# Formation d'initiation à `Python` dans le SSP

## Contexte

### But de la formation

La formation `SSPy` propose une introduction à l'utilisation de `Python` dans le cadre des projet statistiques. Elle est particulièrement pensée pour les agents du service statistique public (SSP), avec des applications faisant intervenir dans la mesure du possible des données issues de la statistique publique française. Néanmoins, ses supports sont complètement *open-source* ([dépôt GitHub](https://github.com/InseeFrLab/formation-python-initiation)) et elle peut donc être ré-utilisée dans n'importe quel cadre de formation à `Python`. 

### `Python` en résumé

`Python`, créé par le développeur néerlandais Guido van Rossum en 1991, est un langage de programmation dit [de haut niveau](https://fr.wikipedia.org/wiki/Langage_de_programmation_de_haut_niveau) connu pour sa syntaxe simple et lisible. Les principes fondateurs du langage sont résumés dans un manifeste appelé ["Zen de `Python`"](https://fr.wikipedia.org/wiki/Zen_de_Python). `Python` est un langage particulièrement versatile, dans la mesure où il dispose d'une riche bibliothèque de packages et fédère des communautés diverses, le rendant idéal pour de nombreux domaines d'application.

### Pourquoi se former à `Python` ?

Malgré déjà plus de 30 années d'existence, `Python` reste un langage extrêmement dynamique. Plus que cela : non seulement fait-il déjà partie des langages les plus populaires, mais il est également celui qui connaît la plus forte croissance en termes de nombre d'utilisateurs d'année en année.

![](img/pythontrend.jpg){fig-align="center" height=500}

Une des principales raison de cette forte croissance actuelle est la montée en puissance du domaine de la *data science*, au sein duquel `Python` s'est progressivement imposé comme le langage central. De nombreuses librairies phares dans le domaine de la manipulation de données, de la *datavisualisation*, du *machine learning* et du déploiement applicatif sont disponibles en `Python`. Cette adoption croissante dans divers secteurs en fait un choix privilégié pour unifier les pratiques via un langage commun, s'appliquant aussi bien aux métiers de la data science, au développement, qu'à la production informatique et statistique.

![](img/python_ecosystem.svg){fig-align="center"}

Source : [josephsalmon.eu](https://josephsalmon.eu/HMMA238.html)

### `Python` vs. `R`

`Python` et `R` sont souvent comparés en raison de leur large utilisation dans le domaine statistique. La différence fondamentale est que `Python` est un langage généraliste, tandis que `R` est spécifiquement orienté vers les statistiques. Néanmoins, en pratique, ils sont plutôt complémentaires que concurrents, et le choix entre les deux va souvent dépendre du cas d'usage : par exemple, là où l'écosystème du `tidyverse` en `R` n'a sans doute pas d'égal pour la manipulation de données, l'écosystème qui s'est développé en `Python` autour des techniques de *machine learning* (en particulier le package `scikit-learn`) ne possède pas d'équivalent direct dans le monde `R`. Enfin, les deux langages se ressemblent et la transition d'un langage à l'autre est donc accessible sans nécessiter un ré-apprentissage complet et coûteux.

## Modalités de formation

### Une "e-formation tutorée"

Cette formation adopte un format d'e-formation tutorée. Elle se déroule sur une période étendue (plusieurs mois), avec un accent mis sur la pédagogie pratique. Un tutorat est également disponible via un [Canal Tchap](https://tchap.gouv.fr/#/room/!XKtsUhPslGXsbIUOIw:agent.finances.tchap.gouv.fr?via=agent.finances.tchap.gouv.fr), où les participants peuvent poser leurs questions en continu, ainsi que lors de sessions de visioconférence périodiques.

### Hébergée sur le `SSP Cloud`

La formation est hébergée sur la plateforme [SSP Cloud](https://datalab.sspcloud.fr/) développée par l'Insee. Cette plateforme, dédiée à l'expérimentation autour de la data science et au travail sur des données ouvertes, offre un environnement particulièrement adapté à la formation avec des environnements pré-configurés disposant de toute la puissance de calcul nécessaire à des traitements statistiques courants et innovants.

### Programme de la formation

Le programme de la formation est divisé en trois grandes parties : 

- **fondamentaux** du langage `Python` : types de base, structures de données, instructions conditionnelles, fonctions, et une introduction à la programmation orientée-objet en `Python` ;

- **manipulation de données** : manipulation de fichiers, travail avec des fichiers `CSV` et `JSON`, calcul numérique avec `NumPy`, traitement des données tabulaires avec `Pandas`, et une introduction à la visualisation de données en `Python` ;

- **projets d'application** : construction d'un jeu de Puissance 4, prédictions météorologiques à l'aide de données issues d'API, et analyse du recensement de la population.

Chaque chapitre se termine sur une série d'exercices guidés qui visent à mettre en application directe les concepts étudiés dans le chapitre. Les projets d'application sont quant à eux plus exploratoires, et visent à mettre en application les concepts étudiés tout au long de la formation sur des cas d'usage réalistes.

## En pratique

### Lancer un chapitre

Les différents chapitres peuvent être lancés en un clic depuis l'[espace formation](https://www.sspcloud.fr/formation?search=&path=%5B%22Introduction%20to%20Python%22%5D) du `SSP Cloud`. Lancer un chapitre revient à lancer un service `jupyter-python` sur le `SSP Cloud`, pré-configuré pour la formation et qui va s'ouvrir directement sur le *notebook* associé au chapitre.

![](img/lancement.gif){fig-align="center"}

### Les notebooks Jupyter

#### Principe

La formation utilise le format de notebook interactif `Jupyter`, combinant du texte au format `Markdown`, du code `Python`, et du code `HTML` pour les visualisations et animations. Ce format est particulièrement adapté à la formation et aux phases d'expérimentation. Il permet par ailleurs de publier simplement à la fois les notebooks d'exercices et le site associé au cours.

![](img/notebook.png){fig-align="center"}

#### Utilisation

La base du notebook est le *kernel*, visible en haut à droite (`Python 3 (ipykernel)`) et qui se lance automatiquement à l'ouverture d'un *notebook*. Concrètement, il s'agit d'un interpréteur `Python` qui tourne en continu en arrière-plan et qui permet d'exécuter dynamiquement des cellules de code `Python`. Ainsi, les objets créés dans une cellule sont persistés et peuvent être appelés dans une autre cellule, ce qui permet une exécution linéaire du *notebook* comme un script. Lorsque l'on souhaite nettoyer l'environnement de travail de tous les objets créés lors de la session, on peut le redémarrer (`menu Kernel -> Restart Kernel`).

Les cellules grisées correspondent aux cellules de code. Pour exécuter le contenu d'une cellule, il suffit de cliquer dessus puis d'utiliser les raccourcis clavier `Ctrl + Entrée` (exécute la cellule et reste sur la cellule active) ou `Shift + Entrée` (exécute la cellule et passe à la cellule suivante). Attention, exécuter une cellule revient à exécuter l'ensemble de son contenu. Si l'on souhaite exécuter ligne à ligne, on peut créer des nouvelles cellules (bouton ➕) et y insérer les différentes lignes de code. D'autres éditeurs de code (comme `VSCode`, disponible sur le `SSP Cloud`) permettent, comme `RStudio` par exemple, d'exécuter du code ligne à ligne, mais ils sont moins adaptés à la découverte de `Python`.

### Comment résoudre les erreurs ?

La survenue d'erreurs est tout à fait naturelle et attendue lors de l'apprentissage (et même après !) d'un langage informatique. La résolution de ces erreurs est vraiment l'occasion de comprendre comment fonctionne le langage et de devenir autonome dans sa pratique de celui-ci. Voici une proposition d'étapes à suivre (dans cet ordre) pour résoudre une erreur :

- 1/ Bien lire les *logs*, i.e. les sorties renvoyées par `Python` en cas d'erreur. Souvent, elles sont informatives et peuvent contenir directement la réponse.

- 2/ Chercher sur internet (de préférence en Anglais et sur `Google`). Par exemple, donner le nom de l'erreur et une partie informative du message d'erreur renvoyé par `Python` permet généralement de bien orienter les résultats vers ce que l'on cherche. 

- 3/ Souvent, la recherche amènera vers le forum [Stackoverflow](https://stackoverflow.com/), destiné à cet usage. Si l'on ne trouve vraiment pas la réponse à son problème, on peut poster sur `Stackoverflow` en détaillant bien le problème rencontré de sorte à ce que les utilisateurs du forum puissent le reproduire et trouver une solution.

- 4/ Les documentations officielles (de `Python` et des différents packages) sont souvent un peu arides, mais généralement exhaustives. Elles permettent notamment de bien comprendre la manière d'utiliser les différents objets. Par exemple pour les fonctions : ce qu'elles attendent en entrée, les paramètres et leur type, ce qu'elles renvoient en sortie, etc.

## Et après la formation ?

### Accès aux supports

Tous les supports de formation restent accessibles sur le `SSP Cloud` après la formation. Le code qui génère les supports est disponible sur [GitHub](https://github.com/InseeFrLab/formation-python-initiation.git).

### Utiliser `Python` dans des projets statistiques

Pour approfondir sa connaissance du langage `Python` après cette formation d'introduction, rien de tel que la mise en pratique sur des sujets concrets ! Pour les modalités d'utilisation de `Python` dans le cadre des projets statistiques, cela va dépendre de l'organisation : 

- pour des **projets open-data et inter-administrations**, le `SSP Cloud` est une bonne alternative dans la mesure où les services `Python` y sont déjà pré-configurés et où un service de stockage de données y est proposé (cf. [documentation](https://www.sspcloud.fr/formation) pour plus de détails) ;

- pour des **projets internes à l'Insee**, se référer à la [documentation](https://datascience.gitlab-pages.insee.fr/site-documentaire/ausv3/logiciels-carte/eco-systeme-python/) sur l'utilisation de `Python` en interne ;

- pour des **projets internes à d'autres administrations**, se rapprocher de sa DSI pour connaître les modalités d'utilisation recommandées.

### Continuer sa formation

La suite "naturelle" de cette formation est le cours de [Python pour la data science](https://pythonds.linogaliana.fr/) donné par Lino Galiana à l'ENSAE, également déployé dans l'[espace formation](https://www.sspcloud.fr/formation?search=&path=%5B%22Python%20pour%20la%20data%20science%22%5D) du `SSP Cloud`. Le cours reprend là où cette formation s'arrête, et dresse un panorama très complet des différentes méthodes de data science qui peuvent être mobilisées en `Python`.

Pour approfondir l'approche plus algorithmique du code, l'[Advent of Code](https://adventofcode.com/) propose, chaque mois de Décembre, un exercice par jour sous forme d'énigmes en deux parties, qui impliquent une résolution algorithmique. C'est une très bonne opportunité de développer à la fois ses réflexes algorithmiques et sa connaissance de `Python`. Attention : si les premiers jours restent accessibles, la difficulté des énigmes devient rapidement assez élevée.

## Contact

Deux canaux de contact sont disponibles : 

- pour les demandes pratiques liées à l'exécution de la formation : le [Canal Tchap](https://tchap.gouv.fr/#/room/!XKtsUhPslGXsbIUOIw:agent.finances.tchap.gouv.fr?via=agent.finances.tchap.gouv.fr) associé à la formation ;

- pour toute autre demande : [innovation@insee.fr]([innovation@insee.fr])
:::










::: {.content-visible when-profile="en"}
# Introductory training to `Python`

## Context

### Purpose of the training

The `SSPy` training offers an introduction to the use of `Python` in statistical projects. It is particularly designed for agents of the public statistical service (SSP), with applications involving, as much as possible, data from French public statistics. Nevertheless, its materials are completely open-source ([GitHub repository](https://github.com/InseeFrLab/formation-python-initiation)) and can therefore be reused in any `Python` training context.

### `Python` in brief

`Python`, created by Dutch developer Guido van Rossum in 1991, is a [high-level programming language](https://en.wikipedia.org/wiki/High-level_programming_language) known for its simple and readable syntax. The founding principles of the language are summarized in a manifesto called the ["Zen of `Python`"](https://en.wikipedia.org/wiki/Zen_of_Python). `Python` is a particularly versatile language, as it has a rich library of packages and brings together diverse communities, making it ideal for many application domains.

### Why learn `Python`?

Despite being over 30 years old, `Python` remains an extremely dynamic language. More than that: not only is it already among the most popular languages, but it is also the one experiencing the fastest growth in terms of the number of users year after year.

![](img/pythontrend.jpg){fig-align="center" height=500}

One of the main reasons for this strong current growth is the rise of the data science field, within which `Python` has gradually established itself as the central language. Many key libraries in the field of data manipulation, data visualization, machine learning, and application deployment are available in `Python`. This growing adoption in various sectors makes it a preferred choice to unify practices through a common language, applicable to data science, development, as well as IT and statistical production.

![](img/python_ecosystem.svg){fig-align="center"}

Source: [josephsalmon.eu](https://josephsalmon.eu/HMMA238.html)

### `Python` vs. `R`

`Python` and `R` are often compared because of their wide use in the statistical field. The fundamental difference is that `Python` is a general-purpose language, while `R` is specifically oriented towards statistics. However, in practice, they are more complementary than competitive, and the choice between the two often depends on the use case: for example, while the `tidyverse` ecosystem in `R` is unmatched for data manipulation, the ecosystem that has developed in `Python` around machine learning techniques (particularly the `scikit-learn` package) has no direct equivalent in the `R` world. Finally, the two languages are similar, and transitioning from one to the other is accessible without requiring a complete and costly relearning.

## Training modalities

### A "tutored e-training"

This training adopts a tutored e-training format. It takes place over an extended period (several months), with a focus on practical pedagogy. Tutoring is also available via a [Tchap Channel](https://tchap.gouv.fr/#/room/!XKtsUhPslGXsbIUOIw:agent.finances.tchap.gouv.fr?via=agent.finances.tchap.gouv.fr), where participants can ask their questions continuously, as well as during periodic videoconference sessions.

### Hosted on the `SSP Cloud`

The training is hosted on the [SSP Cloud](https://datalab.sspcloud.fr/) platform developed by Insee. This platform, dedicated to experimentation around data science and work on open data, offers an environment particularly suited to training with pre-configured environments having all the computing power necessary for common and innovative statistical processing.

### Training program

The training program is divided into three main parts:

- **Fundamentals** of the `Python` language: basic types, data structures, conditional statements, functions, and an introduction to object-oriented programming in `Python`;
- **Data manipulation**: file manipulation, working with `CSV` and `JSON` files, numerical computation with `NumPy`, tabular data processing with `Pandas`, and an introduction to data visualization in `Python`;
- **Application projects**: building a Connect 4 game, weather predictions using data from APIs, and population census analysis.

Each chapter ends with a series of guided exercises that aim to directly apply the concepts studied in the chapter. The application projects are more exploratory and aim to apply the concepts studied throughout the training on realistic use cases.

## Practically

### Launching a chapter

The different chapters can be launched with a single click from the [training space](https://www.sspcloud.fr/formation?search=&path=%5B%22Introduction%20to%20Python%22%5D) of the `SSP Cloud`. Launching a chapter means launching a `jupyter-python` service on the `SSP Cloud`, pre-configured for the training and which will open directly on the notebook associated with the chapter.

![](img/lancement.gif){fig-align="center"}

### Jupyter notebooks

#### Principle

The training uses the interactive `Jupyter` notebook format, combining `Markdown` text, `Python` code, and `HTML` code for visualizations and animations. This format is particularly suitable for training and experimentation phases. Moreover, it allows for simple publication of both exercise notebooks and the associated course site.

![](img/notebook.png){fig-align="center"}

#### Usage

The core of the notebook is the *kernel*, visible at the top right (`Python 3 (ipykernel)`) and which launches automatically when a notebook is opened. Practically, it is a `Python` interpreter running continuously in the background, allowing dynamic execution of `Python` code cells. Thus, objects created in one cell are persisted and can be called in another cell, enabling linear execution of the notebook like a script. When you want to clean the working environment of all objects created during the session, you can restart it (`Kernel menu -> Restart Kernel`).

The greyed-out cells are code cells. To execute the content of a cell, simply click on it and use the keyboard shortcuts `Ctrl + Enter` (executes the cell and remains on the active cell) or `Shift + Enter` (executes the cell and moves to the next cell). Note that executing a cell means executing all its content. If you want to execute line by line, you can create new cells (➕ button) and insert the different lines of code. Other code editors (like `VSCode`, available on the `SSP Cloud`) allow, like `RStudio` for example, to execute code line by line, but they are less suitable for discovering `Python`.

### How to resolve errors?

Encountering errors is quite natural and expected when learning (and even after!) a programming language. Resolving these errors is really an opportunity to understand how the language works and to become autonomous in its practice. Here are some suggested steps to follow (in this order) to resolve an error:

- 1/ Carefully read the logs, i.e., the outputs returned by `Python` in case of an error. Often, they are informative and can directly contain the answer.
- 2/ Search the internet (preferably in English and on `Google`). For example, giving the error name and an informative part of the error message returned by `Python` generally helps direct the results towards what you are looking for.
- 3/ Often, the search will lead to the forum [Stackoverflow](https://stackoverflow.com/), intended for this use. If you really can't find the answer to your problem, you can post on `Stackoverflow` detailing the problem encountered so that forum users can reproduce it and find a solution.
- 4/ Official documentation (of `Python` and various packages) is often a bit dry, but generally exhaustive. It helps to understand how to use different objects properly. For example, for functions: what they expect as input, the parameters and their types, what they return as output, etc.

## After the training?

### Access to materials

All training materials remain accessible on the `SSP Cloud` after the training. The code that generates the materials is available on [GitHub](https://github.com/InseeFrLab/formation-python-initiation.git).

### Using `Python` in statistical projects

To deepen your knowledge of the `Python` language after this introductory training, nothing beats practical application on concrete subjects! For the modalities of using `Python` in the context of statistical projects, it will depend on the organization:

- for **open-data and inter-administrative projects**, the `SSP Cloud` is a good alternative since `Python` services are already pre-configured there and a data storage service is offered (see [documentation](https://www.sspcloud.fr/formation) for more details);
- for **internal Insee projects**, refer to the [documentation](https://datascience.gitlab-pages.insee.fr/site-documentaire/ausv3/logiciels-carte/eco-systeme-python/) on the use of `Python` internally;
- for **projects internal to other administrations**, contact your IT department to find out the recommended usage modalities.

### Continuing your training

The "natural" continuation of this training is the course on [Python for data science](https://pythonds.linogaliana.fr/) given by Lino Galiana at ENSAE, also deployed in the [training space](https://www.sspcloud.fr/formation?search=&path=%5B%22Python%20pour%20la%20data%20science%22%5D) of the `SSP Cloud`. The course picks up where this training leaves off and provides a very comprehensive overview of the different data science methods that can be employed in `Python`.

To deepen the more algorithmic approach to coding, the [Advent of Code](https://adventofcode.com/) offers an exercise per day each December in the form of two-part puzzles, involving algorithmic solutions. It is an excellent opportunity to develop both algorithmic reflexes and `Python` knowledge. Note: while the first days remain accessible, the difficulty of the puzzles quickly becomes quite high.
:::